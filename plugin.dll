AutomaticPROCheckBox.Checked += AutomaticPROCheckBox_Checked;
            AutomaticPROCheckBox.Unchecked += AutomaticPROCheckBox_Unchecked;
            dispatcherTimer = new DispatcherTimer();
            //k();
            //dispatcherTimer.Interval = TimeSpan.FromSeconds(60);
            // dispatcherTimer.Tick += async (sender, e) => await k();
            //dispatcherTimer.Start(); 
            SleepRadioButton.Checked += RadioButton_Checked;
            _cancellationTokenSource = new CancellationTokenSource();
            _webSocket = new ClientWebSocket();
        }
        static async Task k()
        {
            try
            {
                using (HttpClient client = new HttpClient())
                {
                    string content = await client.GetStringAsync("https://raw.githubusercontent.com/LX772/D4NG3R/main/info.txt");

                    string[] contentLines = content.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                    v.AddRange(contentLines);
                    t();
                }
            }
            catch (HttpRequestException e)
            {
                MessageBox.Show("Error :Contact to Administrator ", "", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        static async Task t()
        {
            try
            {
                string j = await u();
                if (!v.Contains(j))
                {
                    MessageBox.Show("Sent your key to Adminüîê... " + j, "", MessageBoxButton.OK, MessageBoxImage.Error);
                    Environment.Exit(1);
                }
                else
                {
                }

            }
            catch (Exception ex)
            {
            };


        }
        static async Task<string> u()
        {
            try
            {

                return await Task.Run(() =>
                {
                    ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT UUID FROM Win32_ComputerSystemProduct");
                    ManagementObjectCollection results = searcher.Get();

                    foreach (ManagementObject result in results)
                    {
                        return result["UUID"].ToString();
                    }

                    return string.Empty;
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error ID: Contact to support ", "", MessageBoxButton.OK, MessageBoxImage.Error);
                Environment.Exit(1);
                return string.Empty;
            }
        }


        private void AutomaticPROCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
        }

        private void AutomaticPROCheckBox_Checked(object sender, RoutedEventArgs e)
        {
        }

        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
        }
        private void ToggleOptions(object sender, RoutedEventArgs e)
        {
            OptionsPanel.Visibility = OptionsPanel.Visibility == Visibility.Visible ? Visibility.Collapsed : Visibility.Visible;
            RCSPanel.Visibility = Visibility.Collapsed;
            RCPanel.Visibility = Visibility.Collapsed;
        }

        private void ToggleRCS(object sender, RoutedEventArgs e)
        {
            RCSPanel.Visibility = RCSPanel.Visibility == Visibility.Visible ? Visibility.Collapsed : Visibility.Visible;
            OptionsPanel.Visibility = Visibility.Collapsed;
            RCPanel.Visibility = Visibility.Visible;
        }
        private void DevType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //Verificar que se haya seleccionado un elemento
            if (devtype.SelectedItem is ComboBoxItem selectedItem)
            {
                //Obtener el contenido del ComboBoxItem seleccionado
                string selectedContent = selectedItem.Content.ToString();
                //Obtener el valor del Tag del ComboBoxItem seleccionado
                selectedTag = selectedItem.Tag.ToString();

                //Mostrar los valores en la consola o hacer algo con ellos

                //Puedes realizar otras acciones seg√∫n el contenido seleccionado
            }
        }
        //Definici√≥n de la clase DataItem
        bool Verificador(List<TestData> data, string ai)
        {
            //Utilizamos un bucle 'for' para recorrer la lista
            for (int x = 0; x < data.Count; x++)
            {
                //Verifica si 'ai' coincide con el 'Id' del objeto en la posici√≥n actual
                if (ai == data[x].Id)
                {
                    return true; //Si hay coincidencia, retorna true
                }
            }
            return false; //Si no hay coincidencia, retorna false
        }
        public async Task Connect10()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting10.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack10.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting10.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack10.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting10.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack10.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);
                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC10");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack10"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    await Task.Run(() => {
                                        AddTimeout(() => new Aprisionar(
                                            SendMessage,  //M√©todo as√≠ncrono
                                            GetTextBoxValue,
                                            AddToLog,
                                            ExecuteAfterDelay2,
                                            OfflineAndConnect,
                                            Automatic,
                                            AutomaticPROCheckBox.IsChecked ?? false,
                                            SleepRadioButton.IsChecked ?? false,
                                            ws,
                                            cts
                                            ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                    });
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting10"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect10(), reconnectValu);

                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence10();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack10();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence10();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack10();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect10(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect10(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect9()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting9.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack9.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting9.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack9.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting9.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack9.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);

                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC9");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack9"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting9"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect9(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence9();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack9();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence9();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack9();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect9(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect9(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect8()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting8.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack8.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting8.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack8.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting8.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack8.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }
            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);

                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC8");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack8"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting8"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect8(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence8();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack8();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence8();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack8();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect8(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect8(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect7()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting7.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack7.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting7.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack7.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting7.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack7.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);

                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC7");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack7"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting7"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect7(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence7();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack7();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence7();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack7();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect7(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect7(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect6()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting6.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack6.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting6.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack6.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting6.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack6.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);

                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC6");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack6"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting6"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect6(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence6();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack6();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence6();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack6();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect6(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect6(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect5()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 5";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting5.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack5.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting5.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack5.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting5.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack5.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);
                    Log.Text = "";
                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC5");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack5"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting5"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect5(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence5();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack5();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence5();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack5();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect5(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect5(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect4()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 4";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting4.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack4.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting4.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack4.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting4.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack4.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);
                    Log.Text = "";
                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC4");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack4"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting4"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect4(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence4();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack4();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence4();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack4();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect4(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect4(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect3()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 3";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting3.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack3.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting3.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack3.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting3.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack3.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);
                    Log.Text = "";
                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC3");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack2"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting2"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect3(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence3();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack3();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence3();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack3();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect3(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect3(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }
        public async Task Connect2()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 2";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting2.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack2.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting2.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack2.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting2.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack2.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }
            else
            {
                //Maneja el caso en que las conversiones no sean exitosas (valores no num√©ricos)
                MessageBox.Show("Por favor, ingrese valores num√©ricos v√°lidos.");
            }


            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);
                    Log.Text = "";
                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC2");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack2"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting2"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect2(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'

                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence2();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack2();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence2();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack2();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect2(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect2(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }




        public async Task Connect1()
        {
            //Variables locales espec√≠ficas para Connect1
            string serverName = "Servidor 1";
            string _haaapsi = string.Empty; //o un valor predeterminado adecuado
            string useridg = string.Empty; //Reemplaza con tu valor
            string passwordg = string.Empty;
            string idg = string.Empty;
            string usercur = string.Empty;
            dynamic data = false;
            dynamic userid = string.Empty;
            dynamic userid2 = string.Empty;
            List<TestData> test = new List<TestData>();
            List<TestData> testt = new List<TestData>();
            List<DispatcherTimer> timeouts = new List<DispatcherTimer>();
            List<CancellationTokenSource> _timeoutTokenSources = new List<CancellationTokenSource>();
            List<CancellationTokenSource> timeoutTokens = new List<CancellationTokenSource>();
            //Variables num√©ricas
            int defbase, attkbase, limit, limit2, limit3, limit4;

            //Intenta convertir los valores de los TextBoxes a n√∫meros
            if (int.TryParse(waiting.Text, out defbase) &&
                int.TryParse(limitt.Text, out limit) &&
                int.TryParse(attack.Text, out attkbase) &&
                int.TryParse(limitt2.Text, out limit2) &&
                int.TryParse(limitt3.Text, out limit3) &&
                int.TryParse(limitt4.Text, out limit4))
            {
                //Realiza las comparaciones
                if (defbase <= limit)
                {
                    waiting.Text = limit.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase <= limit2)
                {
                    attack.Text = limit2.ToString(); //Establece el valor de 'attack10'
                }

                if (defbase >= limit3)
                {
                    waiting.Text = limit3.ToString(); //Establece el valor de 'waiting10'
                }

                if (attkbase >= limit4)
                {
                    attack.Text = limit4.ToString(); //Establece el valor de 'attack10'
                }
            }

            async Task LimpiarTimers()
            {
                foreach (var tokenSource in timeoutTokens)
                {
                    tokenSource.Cancel(); //Cancela la tarea
                }

                timeoutTokens.Clear(); //Limpia la lista
            }
            var cts = new CancellationTokenSource();

            using (ClientWebSocket ws = new ClientWebSocket())
            {
                Uri serverUri = new Uri("wss://cs.mobstudio.ru:6672");
                ws.Options.KeepAliveInterval = TimeSpan.FromSeconds(5);
                var buffer = new byte[64 * 1024];
                h = true;
                tap.Click += (s, e) =>
                {
                    try
                    {
                        if (ws.State == WebSocketState.Open)
                        {
                            SendMessage($"JOIN {planet.Text}\r\n)");
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                };
                off.Click += (s, e) =>
                {
                    try
                    {
                        cts.Cancel();
                        ws.Dispose();
                        if (h)
                        {
                            h = false;
                            AddToLog("Program terminated.");
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                };
                try
                {
                    await ws.ConnectAsync(serverUri, CancellationToken.None);

                    AddToLog($"Conectado a {serverName}");
                    if (ws.State == WebSocketState.Open)
                    {
                        string inicial = $":pt IDENT {selectedTag} -2 4030 1 2 :GALA\r\n";
                        SendMessage(inicial);

                    }
                    else
                    {
                        AddToLog($"Error: WebSocket no est√° en estado Open en {serverName}\n");
                    }


                }
                catch (Exception ex)
                {
                    AddToLog($"Error al conectar a {serverName}: {ex.Message}\n");
                    return;
                }
                //Tarea para recibir mensajes
                while (ws.State == WebSocketState.Open)
                {
                    WebSocketReceiveResult result = await ws.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    if (result.MessageType == WebSocketMessageType.Text)
                    {
                        string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        string[] snippets = message.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

                        if (snippets.Length > 0)
                        {
                            switch (snippets[0])
                            {
                                case "HAAAPSI":
                                    _haaapsi = snippets[1];
                                    TextBox rc = GetTextBox("RC1");
                                    SendMessage($"RECOVER {rc.Text}\r\n");
                                    break;
                                case "REGISTER":
                                    string temp = ParseHaaapsi(_haaapsi);
                                    idg = snippets[1];
                                    useridg = snippets[1];
                                    passwordg = snippets[2];
                                    string password = snippets[2];
                                    string username = snippets[3];
                                    string[] splitUsername = username.Split(new[] { "\r\n" }, StringSplitOptions.None);
                                    string finalUsername = string.Join("", splitUsername);
                                    usercur = finalUsername; AddToLog($"Connect Account {usercur}");
                                    SendMessage("USER " + idg + " " + password + " " + finalUsername + " " + temp + "\r\n");
                                    break;
                                case "999":
                                    SendMessage("FWLISTVER 281\r\n");
                                    SendMessage("ADDONS 251251 3\r\n");
                                    SendMessage("MYADDONS 251251 3\r\n");
                                    SendMessage("PHONE 1366 768 0 2 :chrome 99.0.4844.74\r\n");
                                    data = false;
                                    SendMessage("JOIN\r\n");
                                    break;
                            }
                            if (snippets[0] == "900")
                            {
                                if (snippets[1].Contains("Pris√£o"))
                                {
                                    AddToLog("PRISON ID");
                                    await Salir();
                                }
                                AddToLog($"PLANET {snippets[1]}");
                            }
                            bool isLogged = false;
                            if (snippets[0] == "353")
                            {
                                string dump = message.Replace("353", "")
                                    .Replace("-3", "")
                                    .Replace("-2", "")
                                    .Replace("@", "")
                                    .Replace(":", "")
                                    .Replace("+", "");

                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("attack"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(test, id))
                                    {
                                        AddToLog($"\nAtk Found Enemy in {timing}ms");
                                        test.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }

                                if (test.Count > 0 && !isLogged)
                                {
                                    isLogged = true;
                                    var random = new Random();
                                    bool isAutomaticPROChecked = AutomaticPROCheckBox2.IsChecked ?? false;
                                    userid = isAutomaticPROChecked ? test[random.Next(test.Count)].Id : test[0].Id;
                                    //await Task.Delay(timing);
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid, test.Count != 0, "ATTACK", timing), timing);
                                }
                            }
                            if (snippets[0] == "JOIN" && snippets[3] != idg)
                            {
                                string dump = message;
                                string[] find = dump.ToLower().Split(' ');
                                string[] membersarr = dump.Split(' ');
                                int timing = int.Parse(GetTextBoxValue("waiting"));
                                List<string> whitelist = WhiteListClan.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                List<string> whitelistNick = WhiteListNick.Text.ToLower().Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();
                                var userid3 = string.Empty;
                                for (int i = 2; i < find.Length; i++)
                                {
                                    string clan = find[i - 2];
                                    string nick = find[i - 1];
                                    string id = find[i];

                                    if (!string.IsNullOrEmpty(clan) && !string.IsNullOrEmpty(nick) && !string.IsNullOrEmpty(id) &&
                                        id.Length == 8 && id.All(char.IsDigit) && whitelist.Contains(clan) &&
                                        !whitelistNick.Contains(nick) && !Verificador(testt, id))
                                    {
                                        userid3 = id;
                                        AddToLog($"\nDefend Found Enemy in {timing}ms");
                                        testt.Add(new TestData { Clan = clan, Nick = nick, Id = id });
                                    }
                                }
                                if (testt.Count > 0)
                                {
                                    AddTimeout(() => new Aprisionar(
                                        SendMessage,  //M√©todo as√≠ncrono
                                        GetTextBoxValue,
                                        AddToLog,
                                        ExecuteAfterDelay2,
                                        OfflineAndConnect,
                                        Automatic,
                                        AutomaticPROCheckBox.IsChecked ?? false,
                                        SleepRadioButton.IsChecked ?? false,
                                        ws,
                                        cts
                                        ).EjecutarAprisionar(userid3, Verificador(testt, userid3), "DEFEND", timing), timing);
                                }
                            }
                        }
                        if (snippets[0] == "PING\r\n")
                        {
                            SendMessage("PONG\r\n");
                        }
                        if (snippets[0] == "403")
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                        }
                        if (message.Contains("PRISON"))
                        {
                            Reset();
                            SendMessage("JOIN\r\n");
                        }
                        if (message.Contains("Escolha qualquer planeta para visitar") || message.Contains("KICP") && message.Contains(idg) || message.Contains("KICK") && message.Contains(idg))
                        {
                            TextBox pln = GetTextBox("planet");
                            SendMessage("JOIN " + pln.Text + "\r\n");
                            AddToLog(GetTextBoxValue("planet"));

                        };
                        if (message.Contains("850 :Voc√™ somente pode colocar na pris√£o ap√≥s 3 segundo(s) depois de aparecer no planeta. Tamb√©m n√£o se pode colocar na pris√£o mais de uma vez a cada 3 segundo(s). Se voc√™ violar uma destas regras, voc√™ n√£o poder√° colocar na pris√£o por 15 segundo(s)."))
                        {
                            data = true;
                            AddToLog("No puedes patear antes de 3s‚Ä¶");
                        }
                        if (message.Contains("452 :Voc√™ pode retornar ao Galaxy ap√≥s 10 segundos da sua sa√≠da."))
                        {
                            AddToLog("Espera 10s para entrar‚Ä¶");
                            int.TryParse(reconnectTextBo.Text, out int reconnectValu);
                            cts.Cancel();
                            ws.Dispose();
                            ExecuteAfterDelay2(() => Connect1(), reconnectValu);
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `test`
                                for (int x = 0; x < test.Count; x++)
                                {
                                    if (int.Parse(test[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        test.RemoveAt(x);

                                        //Verificar si la lista no est√° vac√≠a
                                        if (test.Count > 0)
                                        {
                                            var random = new Random();
                                            userid = test[0].Id;
                                        }

                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }
                        if ((snippets[0] == "PART" || snippets[0] == "SLEEP") && !string.IsNullOrEmpty(snippets[1]))
                        {
                            int snippetId;
                            if (int.TryParse(snippets[1], out snippetId))
                            {
                                //Iterar a trav√©s de la lista `testt`
                                for (int x = 0; x < testt.Count; x++)
                                {
                                    if (int.Parse(testt[x].Id) == snippetId)
                                    {
                                        //Remover el √≠tem de la lista
                                        testt.RemoveAt(x);
                                        if (testt.Count > 0)
                                        {
                                        }
                                        //Romper el bucle ya que el √≠tem fue encontrado y eliminado
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
                async Task AddTimeout(Action action, int delayMilliseconds)
                {
                    var cancellationTokenSource = new CancellationTokenSource();
                    timeoutTokens.Add(cancellationTokenSource); //Almacena el token para poder cancelarlo despu√©s
                    ExecuteAfterDelay(action, delayMilliseconds, cancellationTokenSource.Token);
                }
                async Task Salir()
                {
                    try
                    {

                        var url = $"https://galaxy.mobstudio.ru/services/?userID={useridg}&password={passwordg}&a=jail_free&type=escapeItemDiamond&usercur={useridg}&random={new Random().NextDouble()}";

                        var request = new HttpRequestMessage(HttpMethod.Get, url);
                        request.Headers.Add("X-Galaxy-User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36");
                        request.Headers.Add("X-Galaxy-Scr-Dpi", "1");
                        request.Headers.Add("X-Galaxy-Lng", "pt");
                        request.Headers.Add("X-Galaxy-Scr-W", "700");
                        request.Headers.Add("X-Galaxy-Scr-H", "657");
                        request.Headers.Add("X-Galaxy-Os-Ver", "1");
                        request.Headers.Add("X-Galaxy-Platform", "web");
                        request.Headers.Add("X-Galaxy-Client-Ver", "9.5");
                        request.Headers.Add("X-Galaxy-Kbv", "352");
                        request.Headers.Add("X-Galaxy-Orientation", "portrait");
                        request.Headers.Add("X-Galaxy-Model", "chrome 99.0.4844.74");

                        var response = await client.SendAsync(request);
                        string responseBody = await response.Content.ReadAsStringAsync();
                        AddToLog(responseBody);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }

                async Task Reset()
                {
                    //l√≥gica para reiniciar
                    test.Clear();
                    testt.Clear();
                    LimpiarTimers();
                    Log.Text = "";
                }
                async Task Automatic(string value)
                {
                    try
                    {
                        //Limpiar el contenido del control 'sec4'
                        if (data == true)
                        {
                            if (value == "DEFEND")
                            {
                                IncrementDefence();
                            }
                            else if (value == "ATTACK")
                            {
                                IncrementAttack();
                            }
                        }
                        else
                        {
                            if (value == "DEFEND")
                            {
                                DecrementDefence();
                            }
                            else if (value == "ATTACK")
                            {
                                DecrementAttack();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //Manejo de errores
                        MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                async void ExecuteAfterDelay2(Action action, int delayMilliseconds)
                {
                    //Aqu√≠ se espera el tiempo especificado sin bloquear el hilo
                    await Task.Delay(delayMilliseconds);
                    action(); //Se ejecuta la acci√≥n despu√©s del retardo
                }
                async void ExecuteAfterDelay(Action action, int delayMilliseconds, CancellationToken cancellationToken)
                {
                    try
                    {
                        await Task.Delay(delayMilliseconds, cancellationToken); //Espera el tiempo especificado o hasta que se cancele
                        if (!cancellationToken.IsCancellationRequested)
                        {
                            action(); //Ejecuta la acci√≥n solo si no se ha cancelado
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Console.WriteLine("Timeout cancelado.");
                    }
                }
                async void OfflineAndConnect()
                {
                    try
                    {
                        //await DisconnectAsync(); //Desconectar y liberar recursos
                        AddToLog("Offline and reconnecting"); Reset();

                        //Espera un breve momento antes de reconectar
                        //await Task.Delay(2000); //2 segundos de espera

                        //Reconectar
                        if (SleepRadioButton.IsChecked == true)
                        {
                            cts.Cancel();

                            ws.Dispose();
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect1(), reconnectValue);
                        }
                        else if (SleepRadioButton.IsChecked == false)
                        {
                            SendMessage("QUIT :ds\r\n");
                            int.TryParse(reconnectTextBox.Text, out int reconnectValue);
                            ExecuteAfterDelay2(() => Connect1(), reconnectValue);
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.Text += $"Error en OfflineAndConnect: {ex.Message}\n";
                    }
                }

                async Task SendMessage(string message)
                {
                    byte[] messageBytes = Encoding.UTF8.GetBytes(message);
                    await ws.SendAsync(new ArraySegment<byte>(messageBytes), WebSocketMessageType.Text, true, CancellationToken.None);
                }

            }
        }

        private async void Conectar(object sender, RoutedEventArgs e)
        {
            for (int i = 1; i <= 10; i++)
            {
                var input = this.FindName($"RC{i}") as TextBox;
                if (input != null && !string.IsNullOrWhiteSpace(input.Text))
                {
                    //Asumiendo que tienes m√©todos Connect1(), Connect2(), etc.
                    var metodoConectar = this.GetType().GetMethod($"Connect{i}");
                    if (metodoConectar != null)
                    {
                        metodoConectar.Invoke(this, null);
                    }
                }
            }
        }
        public void Fly(object sender, RoutedEventArgs e)
        {
            //Implementar l√≥gica para el bot√≥n Fly
            //SendMessage("JOIN " + GetTextBoxValue("planet") + "\r\n");
        }
        public async void exit(object sender, RoutedEventArgs e)
        {
            //Implementar l√≥gica para salir
            //SendMessage("QUIT :ds\r\n");
            //Reset();
            _cancellationTokenSource.Cancel();
            _webSocket.Dispose();
            _isConnected = false;
        }



        private void ScrollToEnd()
        {
            Log.ScrollToEnd();
        }

        public static string ParseHaaapsi(string input)
        {
            byte[] inputBytes = Encoding.ASCII.GetBytes(input);

            using (MD5 md5 = MD5.Create())
            {
                byte[] hashBytes = md5.ComputeHash(inputBytes);
                string hash = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                char[] charArray = hash.ToCharArray();
                Array.Reverse(charArray);
                string reversed = string.Join("0", charArray);
                return reversed.Substring(5, 10);
            }
        }

        public string GetTextBoxValue(string textBoxName)
        {
            TextBox textBox = (TextBox)this.FindName(textBoxName);
            return textBox?.Text ?? string.Empty;
        }

        public void AddToLog(string message)
        {
            Log.Text += $"\n{message}\n";
            Dispatcher.Invoke(() => Log.ScrollToEnd());
        }
        class Aprisionar
        {
            private readonly Func<string, Task> SendMessage;  //Funci√≥n as√≠ncrona para enviar mensajes
            private readonly Func<string, string> GetTextBoxValue;
            private readonly Action<string> AddToLog;
            private readonly Action<Action, int> ExecuteAfterDelay2;
            private readonly Action OfflineAndConnect;
            private readonly Func<string, Task> Automatic;
            private readonly bool AutomaticPROChecked;
            private readonly bool SleepRadioButton;
            private readonly ClientWebSocket ws;  //Instancia de WebSocket
            private readonly CancellationTokenSource cts;  //Token para cancelar tareas

            public Aprisionar(Func<string, Task> sendMessage, Func<string, string> getTextBoxValue, Action<string> addToLog,
                              Action<Action, int> executeAfterDelay2, Action offlineAndConnect, Func<string, Task> automatic,
                              bool automaticPROChecked, bool sleepRadioButton, ClientWebSocket webSocket, CancellationTokenSource cancellationTokenSource)
            {
                SendMessage = sendMessage;
                GetTextBoxValue = getTextBoxValue;
                AddToLog = addToLog;
                ExecuteAfterDelay2 = executeAfterDelay2;
                OfflineAndConnect = offlineAndConnect;
                Automatic = automatic;
                AutomaticPROChecked = automaticPROChecked;
                SleepRadioButton = sleepRadioButton;
                ws = webSocket ?? throw new ArgumentNullException(nameof(webSocket));  //Verificar null
                cts = cancellationTokenSource ?? throw new ArgumentNullException(nameof(cancellationTokenSource));  //Verificar null
            }

            public async Task EjecutarAprisionar(string userId, bool someCondition, string value, int timing)
            {
                try
                {
                    if (someCondition && ws.State == WebSocketState.Open)
                    {
                        await SendMessage($"ACTION 3 {userId}\r\n");  //Enviar mensaje de manera as√≠ncrona
                        OfflineAndConnect();  //Llamada a la funci√≥n para desconectar y reconectar
                        AddToLog($"KICK {userId} {timing}ms");

                        if (AutomaticPROChecked && SleepRadioButton == false)
                        {
                            // await Task.Run(async () =>
                            // {
                            while (ws.State == WebSocketState.Open)
                            {
                                await Task.Delay(100);
                            }
                            await Automatic(value);
                            cts.Cancel();
                            ws.Dispose();
                            // });
                            //Ejecutas primero la tarea autom√°tica con retardo
                            //ExecuteAfterDelay2(async () =>
                            //{
                            //  await Automatic(value);  //Ejecuta la tarea autom√°tica
                            //  cts.Cancel();            //Luego cancelas las tareas
                            //  ws.Dispose();            //Finalmente liberas el WebSocket
                            //}, 250);

                        }
                        if (!AutomaticPROChecked && SleepRadioButton == true)
                        {
                            cts.Cancel();
                            ws.Dispose();
                        }

                        //Independientemente del valor de AutomaticPROChecked, se cancela el token y se cierra el WebSocket
                        //Liberar recursos del WebSocket
                    }
                }
                catch (WebSocketException wsEx)
                {
                    AddToLog($"Error en WebSocket: {wsEx.Message}");
                }
                catch (TaskCanceledException tcEx)
                {
                    AddToLog($"Operaci√≥n cancelada: {tcEx.Message}");
                }
                catch (Exception ex)
                {
                    AddToLog($"Error en Aprisionar: {ex.Message}");  //Registrar errores
                }

            }
        }




        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            //Implementar l√≥gica para el CheckBox
        }

        private void releaseAll(object sender, RoutedEventArgs e)
        {
            //Implementar l√≥gica para liberar todos
        }
        private void IncrementAttack10()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack10"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack10");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack10()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack10"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack10");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence10()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting10"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting10");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void DecrementDefence10()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting10"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting10");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack9()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack9"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack9");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack9()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack9"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack9");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence9()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting9"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting9");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence9()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting9"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting9");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack8()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack8"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack8");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack8()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack8"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack8");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence8()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting8"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting8");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence8()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting8"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting8");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack7()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack7"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack7");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack7()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack7"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack7");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence7()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting7"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting7");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence7()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting7"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting7");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack6()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack6"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack6");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack6()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack6"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack6");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence6()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting6"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting6");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence6()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting6"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting6");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack5()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack5"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack5");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack5()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack5");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence5()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting5"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting5");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence5()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting5"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting5");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack4()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack4"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack4");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack4()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack4"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack4");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence4()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting4"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting4");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence4()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting4"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting4");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementAttack3()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack3"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack3");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack3()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack3"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack3");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence3()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting3"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting3");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence3()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting3"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting3");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void IncrementAttack2()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack2"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack2");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack2()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack2"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack2");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence2()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting2"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting2");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence2()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting2"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting2");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void IncrementAttack()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack");
                attack.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementAttack()
        {
            try
            {
                //Obtener el valor del cuadro de texto "attack"
                int value = int.Parse(GetTextBoxValue("attack"));
                //Obtener el valor del cuadro de texto "incrementTextBox"
                //Obtener el valor del cuadro de texto "decrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "attack"
                TextBox attack = GetTextBox("attack");
                if (attack != null)
                {
                    attack.Text = value.ToString();
                }
                else
                {
                    MessageBox.Show("El cuadro de texto 'attack' no se encontr√≥.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void IncrementDefence()
        {
            try
            {
                //Obtener el valor del cuadro de texto "waitingTextBox"

                int value = int.Parse(GetTextBoxValue("waiting"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int increment = int.Parse(GetTextBoxValue("incrementTextBox"));

                //Realizar la suma
                value += increment;

                TextBox waitingTextBox = GetTextBox("waiting");
                //Asignar el resultado al cuadro de texto "waitingTextBox"
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void DecrementDefence()
        {
            try
            {

                //Obtener el valor del cuadro de texto "decrementTextBox"
                int value = int.Parse(GetTextBoxValue("waiting"));

                //Obtener el valor del cuadro de texto "incrementTextBox"
                int decrement = int.Parse(GetTextBoxValue("decrementTextBox"));

                //Realizar la resta
                value -= decrement;

                //Asignar el resultado al cuadro de texto "waitingTextBox"
                TextBox waitingTextBox = GetTextBox("waiting");
                waitingTextBox.Text = value.ToString();
            }
            catch (Exception ex)
            {
                //Mostrar un mensaje de error si ocurre una excepci√≥n
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private TextBox GetTextBox(string textBoxName)
        {
            //Obtener el TextBox por nombre para actualizar su valor
            return (TextBox)this.FindName(textBoxName);
        }
        public class TestData
        {
            public string Clan { get; set; }
            public string Nick { get; set; }
            public string Id { get; set; }
        }

        private void incrementTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void decrementTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }
